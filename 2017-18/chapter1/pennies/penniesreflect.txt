<name>Tahmidul Alam</name>
<date>October 17, 2017</date>
<assignment>Pennies Reflection</assignment>
    In reality, we have heard of piggy banks and have understood the concept of saving money. Now, imagine you
see coins inside this huge completely-filled piggy bank, just coins. All of the coins are pennies. You want to keep
count of how many pennies there is in total. Luckily, you keep a journal with you. In the journal, you wrote that
on the 1st of July, the completely-empty piggy bank had a deposit of 1 penny. The next day, the deposit increased
to 2 pennies, then 4 pennies the next day, and so forth. You observe that on each day, there are twice as much
deposits as there was on the previous day. Eventually on day 30, the piggy bank is completely filled. There are a
lot of pennies. You just can't add up 1+2+4+8+16+... . You need to design an algorithm that will count up the amount
of pennies there are in the comepletely-filled piggy bank. This is where pennies.c is born.
    To start of pennies, I thought of a scenario like the one in the last paragraph. After the scenario, I began to
visualize the amount of pennies that is being deposited each day. Since the amount of pennies on the next day is twice
the amount than the previous day, we can model this situation with recursion. The whole purpose of recursion is to det-
ermine the new amount of deposit that is going to be deposited on the next day. I need to somehow add up all of these
recursions. Then, the computer language C, has the for loop. The for loop, or the forever loop, would allow us to add
up the number of pennies from day 1 all the way to day 30. I split down this algorithm in 2 lines. One line is going
to give me the total amount of pennies by adding the previous amount of pennies + current number of pennies. Then,
I would do pennies = pennies * 2, since my new value for pennies is twice the previous number. My total pennies is
under a datatype of long long such that I don't get an error for an integer overflow.
    Integer overflow refers to a certain amount digits exceed the maximum requirements. In other words, if I were to
use 'int' for my total pennies, when I compile my pennies, I would receive an integer overflow. Since we know that
'int' is a datatype that holds 4 bytes of data, it can hold up to 16-bits of data. Our output for the total number of
pennies is more than 16-bits. So, a long long is used to classify the total number of pennies generated as the maximum
bits. Thus, long long has a maximum of 64-bit memory storage. With the debugging of integer overflow, I redid my code
as setting total pennies in a long long. Then, to convert to dollars, I created a variable called dollar_form and
identified it with a datatype of double such that I would be able to take the number of pennies and divide by 100 to
get my amount in dollars. All that's left to do is to print out the final output. With the example from above, I
created a pseudocode of what I wanted to achieve. From there, I designed the code, with the pseudocode in mind.