<name>Tahmidul Alam</name
<date>January 18, 2018</date>
<assignmentname>Old Friends Reflection</assignmentname>
:   There are 3 parts to old friends.
    The first part is constructing Hello [person] which is the user input from
the command line. It is an alternative of hello world but this time, it is with
the input from the command line. Which is argv[1], or the user line input, as
argv[0] is ./hello. Then there is argv[1], which corresponds to the user line
input.
    The second part is fahrenheit. This was carried over from the original
fahrenheit but I had to change celsius as argv[1] in a atof() function. This
function converts string to a float since my input is a float. Then, everything
went smooth, which is nothing else but printing out the output.
    The third part was pennies. This development process is very complex. Now,
I am going to have two user line inputs. So the exact amount of argument count
I can have is 3. Unlike fahrenheit, pennies was just substitution.
    For all the codes, I used an if statement to return 1 if the argument count
(argc) did not meet the conditions in each of the three programs to show that
the input is not valid and will not be accepted.
    I used argc and argv in my main function to indicate that my code will have
a command line input rather than a regular <cs50.h> input (e.g get_int()). argc
measures argument count, so I need to make sure that the inputs for my code must
be a certain number of arguments. In other words, pennies must have 3 arguments:
./pennies <days> <penny>. If the input does not have 3 arguments, then the code
should return an error (return 1). argv[] or argument vector is like a storage
for the input. argv[0] for pennies would be ./pennies, argv[1] is <days>, and argv[2]
is <penny>. I need to use argv[] to access my inputs and convert my input from
string to integer or floats, depending on the situation.
    Thus, this is how I created Old Friends.