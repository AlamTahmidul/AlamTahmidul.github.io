          _____
         |A .  | _____
         | /.\ ||A ^  | _____
         |(_._)|| / \ ||A _  | _____
         |  |  || \ / || ( ) ||A_ _ |
         |____V||  .  ||(_'_)||( v )|
                |____V||  |  || \ / |
                       |____V||  .  |
                              |____V|

Tahmidul Alam
PSET1 Reflection
October 1, 2018

    In the making of credit, I had to understand how the checking algorithm worked. I did research on Luhn's algorithm and determined
    a formula that allowed me to check if the card number is valid. In other words, I did background research on the mathematical
    approach to validating card numbers.

    Now, for the coding process:

    1. Let's make the main function. I want to get the user input as a long long because the credit card number is either 13, 15, or 16 digits long. We will place this under accountNum.
        a. The user input is inside a do-while loop that checks if the input < 0 (negative card # does not exist).
    2. I want to run validity tests using my custom made function check() that takes accountNum as an argument.
    3. Now, let's validate the accountNum.
    4. I'll user check() as a void function to run some validation tests.
    5. The first test I want to do is the length of the card. I made another function called cardLength() that takes cardNum as the argument.
        a. The cardLength() is an another custom function. I will jump there now just for logical process.
    6. I am expecting cardLength() return an int when it's parameter is numLength (accountNum) with the type of long long (input is accountNum).
    7. I made a variable length and set it equal to 0.
    8. I made a while loop that iterates through the input, while setting length +1 everytime there is a number when I divide the numLength (parameter) by 10.
    9. After it finished iterating, I returned the value of len, which is the number of digits of the user_input.
    10. When cardLength() returns the len, I process it into my next test: checkLen() that validates if the user input has 13, 15, or 16 digits.
        a. This function returns a T/F for validity of digits, so the function must return a boolean.
    11. If the digits are 13, 15, or 16, return true that the number of digits is correct. Otherwise, it's not a card number.
    12. Now that the digits are checked, it's time to check the checkSum test.
        a. This test checks if the digits follow Luhn's algorithm.
            - You double every other digit (digit = ((cardNum % 10)))
            - Then you sum up the digits (sum +=)
            - Then sum up the value of the digits ((digit / 10) + (digit % 10))
            - Once the sum is added, we do mod 10 to check if there are no remainders. I used a if statement to check if sum % 10 == 0. This would return true, according to Luhn's algorithm.
        b. Return true, if the digit follows Luhn's algorithm. Otherwise, the card number is false.
    13. Lastly, if the validation succeeds, I need to match the card number with a card brand. I created another function cardType with a void type function that takes in the parameter of cardNum that is long long (the card number is big by itself). The brand must satisfy ALL of the conditions:
        a. AMEX
            - Starting digits are 34 (cardNum between 34 and 35) or 37 (cardNum between 34 and 35).
            - There are 15 digits in total.
        b. Mastercard
            - Starting digits are between 51-55, inclusive (cardNum >= 51 and cardNum < 56).
                Note: >= 51 => >= 51 * 10^14
            - There are 16 digits in the card number.
        c. Visa
            - Starting digit is 4.
            - There are either 13 or 16 digits in total.
    14. Next, if we were to go back to the function check(), we now have to implement the checkLen() and checkSum() functions into this function. If cardNum does not have 13, 15, or 16 digits, or fails the checkSum() test, then the card number is probably invalid. So, we would print out "INVALID".
    15. If the card is valid, then the check() function in the main will execute and print out the card type.

Now, I have successfully completed credit.c, based on Luhn's algorithm, to check if the credit card number is valid or not.

                      ______________________________________
                     /   _______________________________    \
                    |   |            __ __              |   |
                    | _ |    /\     ) _) /''''',        |   |
                    |(.)|   <  >    \ ) // '  `,        |   |
                    | ` |    \/       \/// ~ |~:    +   |   |
                    |   |             ///*\  ' :    |   |   |
                    |   |            ///***\_~.'    |   |   |
                    |   |  .'.    __///````,,..\_   |   |   |
                    |   |   ` \ _/* +_\#\\~\ooo/ \  |   |   |
                    |   |     |/:\ + *\_\#\~\so/!!\ |   |   |
                    |   |    _\_::\ * + \-\#\\o/!!!\|   |   |
                    |   |   / <_=::\ + */_____@_!!!_|   |   |
                    |   |  <__/_____\ */( /\______ _|   |   |
                    |   |   |_   _ __\/_)/* \   ._/  >  |   |
                    |   |   | !!! @     /* + \::=_>_/   |   |
                    |   |   |\!!!/o\\#\_\ + * \::_\     |   |
                    |   |   | \!!/os\~\#_\_* + \:/|     |   |
                    |   |   |  \_/ooo\~\\#_\+_*/- \     |   |
                    |   |   |    \''``,,,,///      .`.  |   |
                    |   |   |     ,.- ***///        '   |   |
                    |   |   |    : ~  \*///             |   |
                    |   |   +    : |   \//\             |   |
                    |   |        ,~  ~ //_( \     /\    | ; |
                    |   |        ,'  ` /_(__(    <  >   |(_)|
                    |   |         `````           \/    |   |
                    |   |_______________________________|   |
                     \______________________________________/