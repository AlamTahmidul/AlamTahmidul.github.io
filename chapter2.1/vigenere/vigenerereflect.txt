<name>Tahmidul Alam</name>
<date>January 19, 2018</date>
<assignmentname>Vigenere Reflection</assignmentname>
:   Vigenere is a program that encrypts a plaintext into a new code that is converted
based on a changing number of characters. In other words, if your plaintext is hello
and you want it to encrypt all of the letters by abcde, your output would be
hfnos, which is abcde letters apart from each letter in hello (h + a = h, e + b = f,
l + c = n, l + d = o, o + e = s, and so on).
    I checked first if my input was valid. So the argument count must be exactly
2, nothing more nothing less. Next, another condition that must satisfy is that argv[1]
cannot be a alphanumeric (as numbers correspond to Caesar and vigenere is based on letter
encryptions only). I used a for loop the check each position in argv[1] if argv[1], in fact
, is alphanumeric.
    To start off, there are a few things that I must keep in mind. Vigenere is to encrypt
a plaintext based on argv[1] or the position of the letters based on the command line
input of the plaintext. In other words, the example with hello earlier: h + a = h,
e + b = f, l + c = n, l + d = o, o + e = s. This is how vigenere supposed to function.
Caesar is based on a fixed number of characters; each of the characters are equidistant
from the output letters (each character differs by the same constant amount 5). However,
vigenere enhances caesar in terms of instead of having a same constant amount, the shift
in characters is changing based on a different letter position. Anywaysm I created a for
loop to implement a key that will turn my letters based on argv[1]. My key was set the
key in all lowercase letters then take each of the letters from argv[1] and add them to
the plaintext of the user input. I implemented this for uppercase and lowercase letters
like in caesar, by implementing c = (pi + k) mod 26 + 'a' (for lowercase letters or
c = (pi + k) mod 26 + 'A' (for uppercase letters). However, if there is a space, the key
would count the space as a letter and add a letter to it (the space will remain as a space)
but the upcoming letters would be off by a lot (as one character is not encrypted based
on argv[1]). So, I added a j-- to keep account for any spaces and this would run the code
smoothly while having all the conditions met.
    In conclusion, this is how I made Vigenere.